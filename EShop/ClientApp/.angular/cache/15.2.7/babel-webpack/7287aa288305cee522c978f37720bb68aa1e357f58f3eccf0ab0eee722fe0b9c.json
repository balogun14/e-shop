{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class StoreService {\n  constructor() {\n    this._items = new BehaviorSubject([]);\n    this.item$ = this._items.asObservable();\n    this._page = new BehaviorSubject(1);\n    this.page$ = this._page.asObservable();\n    // private readonly _pageSize = new Subject<number>(3);\n    // public pageSize$ = this._pageSize.asObservable();\n    this.pageSize = 3;\n    this._pageSizeSubject = new Subject();\n    this.pageSizeChanges$ = this._pageSizeSubject.asObservable();\n    // get pageSize(): number {\n    //   return this._pageSize.getValue();\n    // }\n    // set pageSize(val: number) {\n    //   this._pageSize.next(val);\n    // }\n    this._count = new BehaviorSubject(1);\n    this.count$ = this._count.asObservable();\n  }\n  get items() {\n    return this._items.getValue();\n  }\n  set items(val) {\n    this._items.next(val);\n  }\n  get page() {\n    return this._page.getValue();\n  }\n  set page(val) {\n    this._page.next(val);\n  }\n  get count() {\n    return this._count.getValue();\n  }\n  set count(val) {\n    this._count.next(val);\n  }\n  static #_ = this.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreService,\n    factory: StoreService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAEC,OAAO,QAAQ,MAAM;;AAM/C,OAAM,MAAOC,YAAY;EACvBC;IACiB,WAAM,GAAG,IAAIH,eAAe,CAAS,EAAE,CAAC;IAChD,UAAK,GAAG,IAAI,CAACI,MAAM,CAACC,YAAY,EAAE;IAO1B,UAAK,GAAG,IAAIL,eAAe,CAAS,CAAC,CAAC;IAC9C,UAAK,GAAG,IAAI,CAACM,KAAK,CAACD,YAAY,EAAE;IAO1C;IACA;IACO,aAAQ,GAAW,CAAC;IACX,qBAAgB,GAAG,IAAIJ,OAAO,EAAU;IACjD,qBAAgB,GAAG,IAAI,CAACM,gBAAgB,CAACF,YAAY,EAAE;IAG9D;IACA;IACA;IACA;IACA;IACA;IACiB,WAAM,GAAG,IAAIL,eAAe,CAAS,CAAC,CAAC;IAC/C,WAAM,GAAG,IAAI,CAACQ,MAAM,CAACH,YAAY,EAAE;EA/B7B;EAGf,IAAII,KAAK;IACP,OAAO,IAAI,CAACL,MAAM,CAACM,QAAQ,EAAE;EAC/B;EACA,IAAID,KAAK,CAACE,GAAW;IACnB,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACD,GAAG,CAAC;EACvB;EAGA,IAAIE,IAAI;IACN,OAAO,IAAI,CAACP,KAAK,CAACI,QAAQ,EAAE;EAC9B;EACA,IAAIG,IAAI,CAACF,GAAW;IAClB,IAAI,CAACL,KAAK,CAACM,IAAI,CAACD,GAAG,CAAC;EACtB;EAiBA,IAAIG,KAAK;IACP,OAAO,IAAI,CAACN,MAAM,CAACE,QAAQ,EAAE;EAC/B;EACA,IAAII,KAAK,CAACH,GAAW;IACnB,IAAI,CAACH,MAAM,CAACI,IAAI,CAACD,GAAG,CAAC;EACvB;EAAC;qBAvCUT,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAa,SAAZb,YAAY;IAAAc,YAFX;EAAM","names":["BehaviorSubject","Subject","StoreService","constructor","_items","asObservable","_page","_pageSizeSubject","_count","items","getValue","val","next","page","count","factory","providedIn"],"sourceRoot":"","sources":["/home/awwal/Desktop/e-shop/EShop/ClientApp/src/app/services/store/store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { Item } from 'src/app/interface/item';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreService {\n  constructor() {}\n  private readonly _items = new BehaviorSubject<Item[]>([]);\n  readonly item$ = this._items.asObservable();\n  get items(): Item[] {\n    return this._items.getValue();\n  }\n  set items(val: Item[]) {\n    this._items.next(val);\n  }\n  private readonly _page = new BehaviorSubject<number>(1);\n  readonly page$ = this._page.asObservable();\n  get page(): number {\n    return this._page.getValue();\n  }\n  set page(val: number) {\n    this._page.next(val);\n  }\n  // private readonly _pageSize = new Subject<number>(3);\n  // public pageSize$ = this._pageSize.asObservable();\n  public pageSize: number = 3;\n  public readonly _pageSizeSubject = new Subject<number>();\n  public pageSizeChanges$ = this._pageSizeSubject.asObservable();\n\n\n  // get pageSize(): number {\n  //   return this._pageSize.getValue();\n  // }\n  // set pageSize(val: number) {\n  //   this._pageSize.next(val);\n  // }\n  private readonly _count = new BehaviorSubject<number>(1);\n  readonly count$ = this._count.asObservable();\n\n  get count(): number {\n    return this._count.getValue();\n  }\n  set count(val: number) {\n    this._count.next(val);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}